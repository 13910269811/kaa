/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.kaaproject.kaa.server.appenders.cassandra.config.gen;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CassandraConfig extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CassandraConfig\",\"namespace\":\"org.kaaproject.kaa.server.appenders.cassandra.config.gen\",\"fields\":[{\"name\":\"cassandraServers\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CassandraServer\",\"fields\":[{\"name\":\"host\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"localhost\",\"displayName\":\"Host\",\"weight\":0.75},{\"name\":\"port\",\"type\":\"int\",\"default\":9042,\"displayName\":\"Port\",\"weight\":0.25}]}},\"displayName\":\"Cassandra nodes\",\"minRowCount\":1},{\"name\":\"keySpace\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"displayName\":\"Keyspace name\"},{\"name\":\"CassandraCredential\",\"type\":[{\"type\":\"record\",\"name\":\"CassandraCredential\",\"fields\":[{\"name\":\"user\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"user\",\"displayName\":\"User\",\"weight\":0.5},{\"name\":\"password\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"password\",\"displayName\":\"Password\",\"weight\":0.5}],\"optional\":true},\"null\"],\"displayName\":\"Authentication credentials\"},{\"name\":\"CassandraBatchType\",\"type\":[{\"type\":\"enum\",\"name\":\"CassandraBatchType\",\"symbols\":[\"LOGGED\",\"UNLOGGED\"]},\"null\"],\"default\":\"UNLOGGED\",\"namespace\":\"org.kaaproject.kaa.server.appenders.cassandra.config.gen\",\"optional\":true,\"displayName\":\"Cassandra batch type\"},{\"name\":\"CassandraSocketOption\",\"type\":[{\"type\":\"record\",\"name\":\"CassandraSocketOption\",\"fields\":[{\"name\":\"sendBufferSize\",\"type\":[\"int\",\"null\"],\"default\":8192,\"displayName\":\"Set send buffer size\",\"optional\":true},{\"name\":\"receiveBufferSize\",\"type\":[\"int\",\"null\"],\"default\":8192,\"displayName\":\"Set receive buffer size\",\"optional\":true},{\"name\":\"soLinger\",\"type\":[\"int\",\"null\"],\"default\":0,\"displayName\":\"Delay before a reset is sent\",\"optional\":true},{\"name\":\"connectionTimeout\",\"type\":[\"int\",\"null\"],\"default\":5000,\"displayName\":\"Connection timeout (ms)\",\"optional\":true},{\"name\":\"readTimeout\",\"type\":[\"int\",\"null\"],\"default\":12000,\"displayName\":\"Read timeout (ms)\",\"optional\":true},{\"name\":\"reuseAddress\",\"type\":[\"boolean\",\"null\"],\"default\":false,\"displayName\":\"Reuse address\",\"optional\":true},{\"name\":\"keepAlive\",\"type\":[\"boolean\",\"null\"],\"default\":false,\"displayName\":\"Use keep alive\",\"optional\":true},{\"name\":\"tcpNoDelay\",\"type\":[\"boolean\",\"null\"],\"default\":false,\"displayName\":\"Tcp no delay\",\"optional\":true}]},\"null\"],\"namespace\":\"org.kaaproject.kaa.server.appenders.cassandra.config.gen\",\"displayName\":\"Cassandra socket option\",\"optional\":true},{\"name\":\"CassandraWriteConsistencyLevel\",\"type\":[{\"type\":\"enum\",\"name\":\"CassandraWriteConsistencyLevel\",\"symbols\":[\"ANY\",\"ONE\",\"TWO\",\"THREE\",\"QUORUM\",\"ALL\",\"LOCAL_QUORUM\",\"EACH_QUORUM\",\"SERIAL\",\"LOCAL_SERIAL\",\"LOCAL_ONE\"],\"default\":\"ANY\",\"optional\":true},\"null\"],\"namespace\":\"org.kaaproject.kaa.server.appenders.cassandra.config.gen\",\"displayName\":\"Write consistency level\"},{\"name\":\"CassandraCompression\",\"type\":[{\"type\":\"enum\",\"name\":\"CassandraCompression\",\"symbols\":[\"NONE\",\"SNAPPY\",\"LZ4\"]},\"null\"],\"default\":\"NONE\",\"namespace\":\"org.kaaproject.kaa.server.appenders.cassandra.config.gen\",\"optional\":true,\"displayName\":\"Compression type\"},{\"name\":\"CassandraExecuteRequestType\",\"type\":[{\"type\":\"enum\",\"name\":\"CassandraExecuteRequestType\",\"symbols\":[\"SYNC\",\"ASYNC\"]},\"null\"],\"default\":\"SYNC\",\"namespace\":\"org.kaaproject.kaa.server.appenders.cassandra.config.gen\",\"optional\":true,\"displayName\":\"Cassandra execute request type\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraServer> cassandraServers;
   private java.lang.String keySpace;
   private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCredential CassandraCredential;
   private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraBatchType CassandraBatchType;
   private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraSocketOption CassandraSocketOption;
   private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraWriteConsistencyLevel CassandraWriteConsistencyLevel;
   private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCompression CassandraCompression;
   private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraExecuteRequestType CassandraExecuteRequestType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public CassandraConfig() {}

  /**
   * All-args constructor.
   */
  public CassandraConfig(java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraServer> cassandraServers, java.lang.String keySpace, org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCredential CassandraCredential, org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraBatchType CassandraBatchType, org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraSocketOption CassandraSocketOption, org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraWriteConsistencyLevel CassandraWriteConsistencyLevel, org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCompression CassandraCompression, org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraExecuteRequestType CassandraExecuteRequestType) {
    this.cassandraServers = cassandraServers;
    this.keySpace = keySpace;
    this.CassandraCredential = CassandraCredential;
    this.CassandraBatchType = CassandraBatchType;
    this.CassandraSocketOption = CassandraSocketOption;
    this.CassandraWriteConsistencyLevel = CassandraWriteConsistencyLevel;
    this.CassandraCompression = CassandraCompression;
    this.CassandraExecuteRequestType = CassandraExecuteRequestType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cassandraServers;
    case 1: return keySpace;
    case 2: return CassandraCredential;
    case 3: return CassandraBatchType;
    case 4: return CassandraSocketOption;
    case 5: return CassandraWriteConsistencyLevel;
    case 6: return CassandraCompression;
    case 7: return CassandraExecuteRequestType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cassandraServers = (java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraServer>)value$; break;
    case 1: keySpace = (java.lang.String)value$; break;
    case 2: CassandraCredential = (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCredential)value$; break;
    case 3: CassandraBatchType = (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraBatchType)value$; break;
    case 4: CassandraSocketOption = (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraSocketOption)value$; break;
    case 5: CassandraWriteConsistencyLevel = (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraWriteConsistencyLevel)value$; break;
    case 6: CassandraCompression = (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCompression)value$; break;
    case 7: CassandraExecuteRequestType = (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraExecuteRequestType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'cassandraServers' field.
   */
  public java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraServer> getCassandraServers() {
    return cassandraServers;
  }

  /**
   * Sets the value of the 'cassandraServers' field.
   * @param value the value to set.
   */
  public void setCassandraServers(java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraServer> value) {
    this.cassandraServers = value;
  }

  /**
   * Gets the value of the 'keySpace' field.
   */
  public java.lang.String getKeySpace() {
    return keySpace;
  }

  /**
   * Sets the value of the 'keySpace' field.
   * @param value the value to set.
   */
  public void setKeySpace(java.lang.String value) {
    this.keySpace = value;
  }

  /**
   * Gets the value of the 'CassandraCredential' field.
   */
  public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCredential getCassandraCredential() {
    return CassandraCredential;
  }

  /**
   * Sets the value of the 'CassandraCredential' field.
   * @param value the value to set.
   */
  public void setCassandraCredential(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCredential value) {
    this.CassandraCredential = value;
  }

  /**
   * Gets the value of the 'CassandraBatchType' field.
   */
  public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraBatchType getCassandraBatchType() {
    return CassandraBatchType;
  }

  /**
   * Sets the value of the 'CassandraBatchType' field.
   * @param value the value to set.
   */
  public void setCassandraBatchType(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraBatchType value) {
    this.CassandraBatchType = value;
  }

  /**
   * Gets the value of the 'CassandraSocketOption' field.
   */
  public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraSocketOption getCassandraSocketOption() {
    return CassandraSocketOption;
  }

  /**
   * Sets the value of the 'CassandraSocketOption' field.
   * @param value the value to set.
   */
  public void setCassandraSocketOption(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraSocketOption value) {
    this.CassandraSocketOption = value;
  }

  /**
   * Gets the value of the 'CassandraWriteConsistencyLevel' field.
   */
  public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraWriteConsistencyLevel getCassandraWriteConsistencyLevel() {
    return CassandraWriteConsistencyLevel;
  }

  /**
   * Sets the value of the 'CassandraWriteConsistencyLevel' field.
   * @param value the value to set.
   */
  public void setCassandraWriteConsistencyLevel(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraWriteConsistencyLevel value) {
    this.CassandraWriteConsistencyLevel = value;
  }

  /**
   * Gets the value of the 'CassandraCompression' field.
   */
  public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCompression getCassandraCompression() {
    return CassandraCompression;
  }

  /**
   * Sets the value of the 'CassandraCompression' field.
   * @param value the value to set.
   */
  public void setCassandraCompression(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCompression value) {
    this.CassandraCompression = value;
  }

  /**
   * Gets the value of the 'CassandraExecuteRequestType' field.
   */
  public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraExecuteRequestType getCassandraExecuteRequestType() {
    return CassandraExecuteRequestType;
  }

  /**
   * Sets the value of the 'CassandraExecuteRequestType' field.
   * @param value the value to set.
   */
  public void setCassandraExecuteRequestType(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraExecuteRequestType value) {
    this.CassandraExecuteRequestType = value;
  }

  /** Creates a new CassandraConfig RecordBuilder */
  public static org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder newBuilder() {
    return new org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder();
  }
  
  /** Creates a new CassandraConfig RecordBuilder by copying an existing Builder */
  public static org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder newBuilder(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder other) {
    return new org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder(other);
  }
  
  /** Creates a new CassandraConfig RecordBuilder by copying an existing CassandraConfig instance */
  public static org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder newBuilder(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig other) {
    return new org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder(other);
  }
  
  /**
   * RecordBuilder for CassandraConfig instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CassandraConfig>
    implements org.apache.avro.data.RecordBuilder<CassandraConfig> {

    private java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraServer> cassandraServers;
    private java.lang.String keySpace;
    private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCredential CassandraCredential;
    private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraBatchType CassandraBatchType;
    private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraSocketOption CassandraSocketOption;
    private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraWriteConsistencyLevel CassandraWriteConsistencyLevel;
    private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCompression CassandraCompression;
    private org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraExecuteRequestType CassandraExecuteRequestType;

    /** Creates a new Builder */
    private Builder() {
      super(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cassandraServers)) {
        this.cassandraServers = data().deepCopy(fields()[0].schema(), other.cassandraServers);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.keySpace)) {
        this.keySpace = data().deepCopy(fields()[1].schema(), other.keySpace);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.CassandraCredential)) {
        this.CassandraCredential = data().deepCopy(fields()[2].schema(), other.CassandraCredential);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.CassandraBatchType)) {
        this.CassandraBatchType = data().deepCopy(fields()[3].schema(), other.CassandraBatchType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.CassandraSocketOption)) {
        this.CassandraSocketOption = data().deepCopy(fields()[4].schema(), other.CassandraSocketOption);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.CassandraWriteConsistencyLevel)) {
        this.CassandraWriteConsistencyLevel = data().deepCopy(fields()[5].schema(), other.CassandraWriteConsistencyLevel);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.CassandraCompression)) {
        this.CassandraCompression = data().deepCopy(fields()[6].schema(), other.CassandraCompression);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.CassandraExecuteRequestType)) {
        this.CassandraExecuteRequestType = data().deepCopy(fields()[7].schema(), other.CassandraExecuteRequestType);
        fieldSetFlags()[7] = true;
      }
    }
    
    /** Creates a Builder by copying an existing CassandraConfig instance */
    private Builder(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig other) {
            super(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.SCHEMA$);
      if (isValidValue(fields()[0], other.cassandraServers)) {
        this.cassandraServers = data().deepCopy(fields()[0].schema(), other.cassandraServers);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.keySpace)) {
        this.keySpace = data().deepCopy(fields()[1].schema(), other.keySpace);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.CassandraCredential)) {
        this.CassandraCredential = data().deepCopy(fields()[2].schema(), other.CassandraCredential);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.CassandraBatchType)) {
        this.CassandraBatchType = data().deepCopy(fields()[3].schema(), other.CassandraBatchType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.CassandraSocketOption)) {
        this.CassandraSocketOption = data().deepCopy(fields()[4].schema(), other.CassandraSocketOption);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.CassandraWriteConsistencyLevel)) {
        this.CassandraWriteConsistencyLevel = data().deepCopy(fields()[5].schema(), other.CassandraWriteConsistencyLevel);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.CassandraCompression)) {
        this.CassandraCompression = data().deepCopy(fields()[6].schema(), other.CassandraCompression);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.CassandraExecuteRequestType)) {
        this.CassandraExecuteRequestType = data().deepCopy(fields()[7].schema(), other.CassandraExecuteRequestType);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'cassandraServers' field */
    public java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraServer> getCassandraServers() {
      return cassandraServers;
    }
    
    /** Sets the value of the 'cassandraServers' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setCassandraServers(java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraServer> value) {
      validate(fields()[0], value);
      this.cassandraServers = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'cassandraServers' field has been set */
    public boolean hasCassandraServers() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'cassandraServers' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearCassandraServers() {
      cassandraServers = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'keySpace' field */
    public java.lang.String getKeySpace() {
      return keySpace;
    }
    
    /** Sets the value of the 'keySpace' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setKeySpace(java.lang.String value) {
      validate(fields()[1], value);
      this.keySpace = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'keySpace' field has been set */
    public boolean hasKeySpace() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'keySpace' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearKeySpace() {
      keySpace = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'CassandraCredential' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCredential getCassandraCredential() {
      return CassandraCredential;
    }
    
    /** Sets the value of the 'CassandraCredential' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setCassandraCredential(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCredential value) {
      validate(fields()[2], value);
      this.CassandraCredential = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'CassandraCredential' field has been set */
    public boolean hasCassandraCredential() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'CassandraCredential' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearCassandraCredential() {
      CassandraCredential = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'CassandraBatchType' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraBatchType getCassandraBatchType() {
      return CassandraBatchType;
    }
    
    /** Sets the value of the 'CassandraBatchType' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setCassandraBatchType(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraBatchType value) {
      validate(fields()[3], value);
      this.CassandraBatchType = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'CassandraBatchType' field has been set */
    public boolean hasCassandraBatchType() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'CassandraBatchType' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearCassandraBatchType() {
      CassandraBatchType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'CassandraSocketOption' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraSocketOption getCassandraSocketOption() {
      return CassandraSocketOption;
    }
    
    /** Sets the value of the 'CassandraSocketOption' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setCassandraSocketOption(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraSocketOption value) {
      validate(fields()[4], value);
      this.CassandraSocketOption = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'CassandraSocketOption' field has been set */
    public boolean hasCassandraSocketOption() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'CassandraSocketOption' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearCassandraSocketOption() {
      CassandraSocketOption = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'CassandraWriteConsistencyLevel' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraWriteConsistencyLevel getCassandraWriteConsistencyLevel() {
      return CassandraWriteConsistencyLevel;
    }
    
    /** Sets the value of the 'CassandraWriteConsistencyLevel' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setCassandraWriteConsistencyLevel(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraWriteConsistencyLevel value) {
      validate(fields()[5], value);
      this.CassandraWriteConsistencyLevel = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'CassandraWriteConsistencyLevel' field has been set */
    public boolean hasCassandraWriteConsistencyLevel() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'CassandraWriteConsistencyLevel' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearCassandraWriteConsistencyLevel() {
      CassandraWriteConsistencyLevel = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'CassandraCompression' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCompression getCassandraCompression() {
      return CassandraCompression;
    }
    
    /** Sets the value of the 'CassandraCompression' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setCassandraCompression(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCompression value) {
      validate(fields()[6], value);
      this.CassandraCompression = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'CassandraCompression' field has been set */
    public boolean hasCassandraCompression() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'CassandraCompression' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearCassandraCompression() {
      CassandraCompression = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'CassandraExecuteRequestType' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraExecuteRequestType getCassandraExecuteRequestType() {
      return CassandraExecuteRequestType;
    }
    
    /** Sets the value of the 'CassandraExecuteRequestType' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder setCassandraExecuteRequestType(org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraExecuteRequestType value) {
      validate(fields()[7], value);
      this.CassandraExecuteRequestType = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'CassandraExecuteRequestType' field has been set */
    public boolean hasCassandraExecuteRequestType() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'CassandraExecuteRequestType' field */
    public org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraConfig.Builder clearCassandraExecuteRequestType() {
      CassandraExecuteRequestType = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public CassandraConfig build() {
      try {
        CassandraConfig record = new CassandraConfig();
        record.cassandraServers = fieldSetFlags()[0] ? this.cassandraServers : (java.util.List<org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraServer>) defaultValue(fields()[0]);
        record.keySpace = fieldSetFlags()[1] ? this.keySpace : (java.lang.String) defaultValue(fields()[1]);
        record.CassandraCredential = fieldSetFlags()[2] ? this.CassandraCredential : (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCredential) defaultValue(fields()[2]);
        record.CassandraBatchType = fieldSetFlags()[3] ? this.CassandraBatchType : (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraBatchType) defaultValue(fields()[3]);
        record.CassandraSocketOption = fieldSetFlags()[4] ? this.CassandraSocketOption : (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraSocketOption) defaultValue(fields()[4]);
        record.CassandraWriteConsistencyLevel = fieldSetFlags()[5] ? this.CassandraWriteConsistencyLevel : (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraWriteConsistencyLevel) defaultValue(fields()[5]);
        record.CassandraCompression = fieldSetFlags()[6] ? this.CassandraCompression : (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraCompression) defaultValue(fields()[6]);
        record.CassandraExecuteRequestType = fieldSetFlags()[7] ? this.CassandraExecuteRequestType : (org.kaaproject.kaa.server.appenders.cassandra.config.gen.CassandraExecuteRequestType) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
