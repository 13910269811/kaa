/*
 * Copyright 2014 CyberVision, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef LOGRECORD_HPP_
#define LOGRECORD_HPP_

#include <vector>
#include <boost/cstdint.hpp>
#include "kaa/common/AvroByteArrayConverter.hpp"
#include "kaa/log/gen/LogGen.hpp"

namespace kaa {

class LogRecord {
public:
    LogRecord(const %{log_record_class_name} & logRecord) {
        SharedDataBuffer buffer = converter_.toByteArray(logRecord);

        for (size_t i = 0; i < buffer.second; i++) {
            logData_.push_back(buffer.first[i]);
        }
    }
    ~LogRecord() {}

    const std::vector<boost::uint8_t>&  getData();
    size_t                              getSize() const;

private:
    AvroByteArrayConverter<%{log_record_class_name}> converter_;
    std::vector<boost::uint8_t> logData_;
};

}  // namespace kaa


#endif /* LOGRECORD_HPP_ */
