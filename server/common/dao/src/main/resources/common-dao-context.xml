<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2014 CyberVision, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.0.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/data/mongo
            http://www.springframework.org/schema/data/mongo/spring-mongo.xsd
            http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util-3.0.xsd">

    <context:annotation-config/>

    <context:component-scan base-package="org.kaaproject.kaa.server.common.dao"/>
    <context:property-placeholder location="classpath:dao.properties"/>

    <mongo:mongo id="mongoClient" replica-set="${servers}" write-concern="${write.concern}">
        <mongo:options
                connections-per-host="${connections.per.host}"
                threads-allowed-to-block-for-connection-multiplier="5"
                connect-timeout="${connection.timeout}"
                max-wait-time="${max.wait.time}"
                auto-connect-retry="${auto.connect.retry}"
                socket-keep-alive="${socket.keepalive}"
                socket-timeout="${socket.timeout}"
                slave-ok="${slaveOk}"
                write-number="1"
                write-timeout="0"
                write-fsync="true"/>
    </mongo:mongo>

    <mongo:db-factory dbname="${db.name}" mongo-ref="mongoClient"/>

    <mongo:auditing />

    <bean id="mongoTypeMapper" class="org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper">
        <constructor-arg name="typeKey">
            <null/>
        </constructor-arg>
    </bean>

    <bean id="mongoMappingContext" class="org.springframework.data.mongodb.core.mapping.MongoMappingContext"/>

    <bean id="mongoConverter" class="org.springframework.data.mongodb.core.convert.MappingMongoConverter">
        <constructor-arg name="mongoDbFactory" ref="mongoDbFactory"/>
        <constructor-arg name="mappingContext" ref="mongoMappingContext"/>
        <property name="typeMapper" ref="mongoTypeMapper"></property>
    </bean>

    <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg name="mongoDbFactory" ref="mongoDbFactory"/>
        <constructor-arg name="mongoConverter" ref="mongoConverter"/>
        <property name="writeResultChecking" value="EXCEPTION"/>
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan" value="org.kaaproject.kaa.server.common.dao.model.sql" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
            </props>
        </property>
    </bean>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driver.className}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="persistenceExceptionTranslationPostProcessor"
        class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

    <bean id="schemaGenerationFactory" class="org.kaaproject.kaa.server.common.core.algorithms.schema.SchemaGenerationAlgorithmFactoryImpl"/>

    <bean id="overrideAlgorithmFactory"
        class="org.kaaproject.kaa.server.common.core.algorithms.override.DefaultOverrideAlgorithmFactory" />

    <bean id="eventSchemaProcessor"
        class="org.kaaproject.kaa.server.common.dao.schema.EventSchemaProcessorImpl" />

    <bean id="endpointUserDao"
        class="org.kaaproject.kaa.server.common.dao.impl.mongo.EndpointUserMongoDao" />
    <alias name="endpointUserDao" alias="kaaEndpointUserVerifier" />

    <bean id="dummyEndpointUserVerifier"
        class="org.kaaproject.kaa.server.common.dao.DummyEndpointUserVerifier" />

    <bean id="endpointUserVerifierResolver"
        class="org.kaaproject.kaa.server.common.dao.DefaultEndpointUserVerifierResolver">
        <constructor-arg name="verifierMap" ref="verifierMap"></constructor-arg>
    </bean>

    <bean id="mongoDBLogAppender" class="org.kaaproject.kaa.server.operations.service.logs.mongo.MongoDBLogAppender">
        <constructor-arg name="name" value="appender"></constructor-arg>
    </bean>

    <util:map id="verifierMap">
        <entry key="dummyEndpointUserVerifier" value-ref="dummyEndpointUserVerifier" />
        <entry key="kaaEndpointUserVerifier" value-ref="kaaEndpointUserVerifier" />
    </util:map>


    <bean id="logAppenderResolver" class="org.kaaproject.kaa.server.operations.service.logs.DefaultLogAppenderResolver">
        <constructor-arg name="appenderMap" ref="appenderMap"></constructor-arg>
    </bean>

    <util:map id="appenderMap">
        <entry key="mongoDBLogAppender" value-ref="mongoDBLogAppender" />
    </util:map>

</beans>