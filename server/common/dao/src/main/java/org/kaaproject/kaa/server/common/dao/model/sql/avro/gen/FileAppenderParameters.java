/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.kaaproject.kaa.server.common.dao.model.sql.avro.gen;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FileAppenderParameters extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FileAppenderParameters\",\"namespace\":\"org.kaaproject.kaa.server.common.dao.model.sql.avro.gen\",\"fields\":[{\"name\":\"logDirectoryPath\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"username\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"sshKey\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String logDirectoryPath;
   private java.lang.String username;
   private java.lang.String sshKey;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public FileAppenderParameters() {}

  /**
   * All-args constructor.
   */
  public FileAppenderParameters(java.lang.String logDirectoryPath, java.lang.String username, java.lang.String sshKey) {
    this.logDirectoryPath = logDirectoryPath;
    this.username = username;
    this.sshKey = sshKey;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return logDirectoryPath;
    case 1: return username;
    case 2: return sshKey;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: logDirectoryPath = (java.lang.String)value$; break;
    case 1: username = (java.lang.String)value$; break;
    case 2: sshKey = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'logDirectoryPath' field.
   */
  public java.lang.String getLogDirectoryPath() {
    return logDirectoryPath;
  }

  /**
   * Sets the value of the 'logDirectoryPath' field.
   * @param value the value to set.
   */
  public void setLogDirectoryPath(java.lang.String value) {
    this.logDirectoryPath = value;
  }

  /**
   * Gets the value of the 'username' field.
   */
  public java.lang.String getUsername() {
    return username;
  }

  /**
   * Sets the value of the 'username' field.
   * @param value the value to set.
   */
  public void setUsername(java.lang.String value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'sshKey' field.
   */
  public java.lang.String getSshKey() {
    return sshKey;
  }

  /**
   * Sets the value of the 'sshKey' field.
   * @param value the value to set.
   */
  public void setSshKey(java.lang.String value) {
    this.sshKey = value;
  }

  /** Creates a new FileAppenderParameters RecordBuilder */
  public static org.kaaproject.kaa.server.common.dao.model.sql.avro.gen.FileAppenderParameters.Builder newBuilder() {
    return new org.kaaproject.kaa.server.common.dao.model.sql.avro.gen.FileAppenderParameters.Builder();
  }
  
  /** Creates a new FileAppenderParameters RecordBuilder by copying an existing Builder */
  public static org.kaaproject.kaa.server.common.dao.model.sql.avro.gen.FileAppenderParameters.Builder newBuilder(org.kaaproject.kaa.server.common.dao.model.sql.avro.gen.FileAppenderParameters.Builder other) {
    return new org.kaaproject.kaa.server.common.dao.model.sql.avro.gen.FileAppenderParameters.Builder(other);
  }
  
  /** Creates a new FileAppenderParameters RecordBuilder by copying an existing FileAppenderParameters instance */
  public static org.kaaproject.kaa.server.common.dao.model.sql.avro.gen.FileAppenderParameters.Builder newBuilder(org.kaaproject.kaa.server.common.dao.model.sql.avro.gen.FileAppenderParameters other) {
    return new org.kaaproject.kaa.server.common.dao.model.sql.avro.gen.FileAppenderParameters.Builder(other);
  }
  
  /**
   * RecordBuilder for FileAppenderParameters instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FileAppenderParameters>
    implements org.apache.avro.data.RecordBuilder<FileAppenderParameters> {

    private java.lang.String logDirectoryPath;
    private java.lang.String username;
    private java.lang.String sshKey;

    /** Creates a new Builder */
    private Builder() {
      super(org.kaaproject.kaa.server.common.dao.model.sql.avro.gen.FileAppenderParameters.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.kaaproject.kaa.server.common.dao.model.sql.avro.gen.FileAppenderParameters.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.logDirectoryPath)) {
        this.logDirectoryPath = data().deepCopy(fields()[0].schema(), other.logDirectoryPath);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sshKey)) {
        this.sshKey = data().deepCopy(fields()[2].schema(), other.sshKey);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing FileAppenderParameters instance */
    private Builder(org.kaaproject.kaa.server.common.dao.model.sql.avro.gen.FileAppenderParameters other) {
            super(org.kaaproject.kaa.server.common.dao.model.sql.avro.gen.FileAppenderParameters.SCHEMA$);
      if (isValidValue(fields()[0], other.logDirectoryPath)) {
        this.logDirectoryPath = data().deepCopy(fields()[0].schema(), other.logDirectoryPath);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sshKey)) {
        this.sshKey = data().deepCopy(fields()[2].schema(), other.sshKey);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'logDirectoryPath' field */
    public java.lang.String getLogDirectoryPath() {
      return logDirectoryPath;
    }
    
    /** Sets the value of the 'logDirectoryPath' field */
    public org.kaaproject.kaa.server.common.dao.model.sql.avro.gen.FileAppenderParameters.Builder setLogDirectoryPath(java.lang.String value) {
      validate(fields()[0], value);
      this.logDirectoryPath = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'logDirectoryPath' field has been set */
    public boolean hasLogDirectoryPath() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'logDirectoryPath' field */
    public org.kaaproject.kaa.server.common.dao.model.sql.avro.gen.FileAppenderParameters.Builder clearLogDirectoryPath() {
      logDirectoryPath = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'username' field */
    public java.lang.String getUsername() {
      return username;
    }
    
    /** Sets the value of the 'username' field */
    public org.kaaproject.kaa.server.common.dao.model.sql.avro.gen.FileAppenderParameters.Builder setUsername(java.lang.String value) {
      validate(fields()[1], value);
      this.username = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'username' field has been set */
    public boolean hasUsername() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'username' field */
    public org.kaaproject.kaa.server.common.dao.model.sql.avro.gen.FileAppenderParameters.Builder clearUsername() {
      username = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'sshKey' field */
    public java.lang.String getSshKey() {
      return sshKey;
    }
    
    /** Sets the value of the 'sshKey' field */
    public org.kaaproject.kaa.server.common.dao.model.sql.avro.gen.FileAppenderParameters.Builder setSshKey(java.lang.String value) {
      validate(fields()[2], value);
      this.sshKey = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'sshKey' field has been set */
    public boolean hasSshKey() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'sshKey' field */
    public org.kaaproject.kaa.server.common.dao.model.sql.avro.gen.FileAppenderParameters.Builder clearSshKey() {
      sshKey = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public FileAppenderParameters build() {
      try {
        FileAppenderParameters record = new FileAppenderParameters();
        record.logDirectoryPath = fieldSetFlags()[0] ? this.logDirectoryPath : (java.lang.String) defaultValue(fields()[0]);
        record.username = fieldSetFlags()[1] ? this.username : (java.lang.String) defaultValue(fields()[1]);
        record.sshKey = fieldSetFlags()[2] ? this.sshKey : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
