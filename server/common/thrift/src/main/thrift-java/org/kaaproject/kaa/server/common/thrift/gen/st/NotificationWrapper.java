/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.kaaproject.kaa.server.common.thrift.gen.st;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NotificationWrapper implements org.apache.thrift.TBase<NotificationWrapper, NotificationWrapper._Fields>, java.io.Serializable, Cloneable, Comparable<NotificationWrapper> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NotificationWrapper");

  private static final org.apache.thrift.protocol.TField RECEIVED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("receivedTime", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NotificationWrapperStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NotificationWrapperTupleSchemeFactory());
  }

  public long receivedTime; // required
  public String body; // required
  public String topicId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RECEIVED_TIME((short)1, "receivedTime"),
    BODY((short)2, "body"),
    TOPIC_ID((short)3, "topicId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RECEIVED_TIME
          return RECEIVED_TIME;
        case 2: // BODY
          return BODY;
        case 3: // TOPIC_ID
          return TOPIC_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECEIVEDTIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RECEIVED_TIME, new org.apache.thrift.meta_data.FieldMetaData("receivedTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Long")));
    tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NotificationWrapper.class, metaDataMap);
  }

  public NotificationWrapper() {
  }

  public NotificationWrapper(
    long receivedTime,
    String body,
    String topicId)
  {
    this();
    this.receivedTime = receivedTime;
    setReceivedTimeIsSet(true);
    this.body = body;
    this.topicId = topicId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NotificationWrapper(NotificationWrapper other) {
    __isset_bitfield = other.__isset_bitfield;
    this.receivedTime = other.receivedTime;
    if (other.isSetBody()) {
      this.body = other.body;
    }
    if (other.isSetTopicId()) {
      this.topicId = other.topicId;
    }
  }

  public NotificationWrapper deepCopy() {
    return new NotificationWrapper(this);
  }

  @Override
  public void clear() {
    setReceivedTimeIsSet(false);
    this.receivedTime = 0;
    this.body = null;
    this.topicId = null;
  }

  public long getReceivedTime() {
    return this.receivedTime;
  }

  public NotificationWrapper setReceivedTime(long receivedTime) {
    this.receivedTime = receivedTime;
    setReceivedTimeIsSet(true);
    return this;
  }

  public void unsetReceivedTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEDTIME_ISSET_ID);
  }

  /** Returns true if field receivedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivedTime() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVEDTIME_ISSET_ID);
  }

  public void setReceivedTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEDTIME_ISSET_ID, value);
  }

  public String getBody() {
    return this.body;
  }

  public NotificationWrapper setBody(String body) {
    this.body = body;
    return this;
  }

  public void unsetBody() {
    this.body = null;
  }

  /** Returns true if field body is set (has been assigned a value) and false otherwise */
  public boolean isSetBody() {
    return this.body != null;
  }

  public void setBodyIsSet(boolean value) {
    if (!value) {
      this.body = null;
    }
  }

  public String getTopicId() {
    return this.topicId;
  }

  public NotificationWrapper setTopicId(String topicId) {
    this.topicId = topicId;
    return this;
  }

  public void unsetTopicId() {
    this.topicId = null;
  }

  /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
  public boolean isSetTopicId() {
    return this.topicId != null;
  }

  public void setTopicIdIsSet(boolean value) {
    if (!value) {
      this.topicId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RECEIVED_TIME:
      if (value == null) {
        unsetReceivedTime();
      } else {
        setReceivedTime((Long)value);
      }
      break;

    case BODY:
      if (value == null) {
        unsetBody();
      } else {
        setBody((String)value);
      }
      break;

    case TOPIC_ID:
      if (value == null) {
        unsetTopicId();
      } else {
        setTopicId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RECEIVED_TIME:
      return Long.valueOf(getReceivedTime());

    case BODY:
      return getBody();

    case TOPIC_ID:
      return getTopicId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RECEIVED_TIME:
      return isSetReceivedTime();
    case BODY:
      return isSetBody();
    case TOPIC_ID:
      return isSetTopicId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NotificationWrapper)
      return this.equals((NotificationWrapper)that);
    return false;
  }

  public boolean equals(NotificationWrapper that) {
    if (that == null)
      return false;

    boolean this_present_receivedTime = true;
    boolean that_present_receivedTime = true;
    if (this_present_receivedTime || that_present_receivedTime) {
      if (!(this_present_receivedTime && that_present_receivedTime))
        return false;
      if (this.receivedTime != that.receivedTime)
        return false;
    }

    boolean this_present_body = true && this.isSetBody();
    boolean that_present_body = true && that.isSetBody();
    if (this_present_body || that_present_body) {
      if (!(this_present_body && that_present_body))
        return false;
      if (!this.body.equals(that.body))
        return false;
    }

    boolean this_present_topicId = true && this.isSetTopicId();
    boolean that_present_topicId = true && that.isSetTopicId();
    if (this_present_topicId || that_present_topicId) {
      if (!(this_present_topicId && that_present_topicId))
        return false;
      if (!this.topicId.equals(that.topicId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_receivedTime = true;
    builder.append(present_receivedTime);
    if (present_receivedTime)
      builder.append(receivedTime);

    boolean present_body = true && (isSetBody());
    builder.append(present_body);
    if (present_body)
      builder.append(body);

    boolean present_topicId = true && (isSetTopicId());
    builder.append(present_topicId);
    if (present_topicId)
      builder.append(topicId);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(NotificationWrapper other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReceivedTime()).compareTo(other.isSetReceivedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivedTime, other.receivedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopicId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NotificationWrapper(");
    boolean first = true;

    sb.append("receivedTime:");
    sb.append(this.receivedTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("body:");
    if (this.body == null) {
      sb.append("null");
    } else {
      sb.append(this.body);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topicId:");
    if (this.topicId == null) {
      sb.append("null");
    } else {
      sb.append(this.topicId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NotificationWrapperStandardSchemeFactory implements SchemeFactory {
    public NotificationWrapperStandardScheme getScheme() {
      return new NotificationWrapperStandardScheme();
    }
  }

  private static class NotificationWrapperStandardScheme extends StandardScheme<NotificationWrapper> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NotificationWrapper struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RECEIVED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.receivedTime = iprot.readI64();
              struct.setReceivedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.body = iprot.readString();
              struct.setBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOPIC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topicId = iprot.readString();
              struct.setTopicIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NotificationWrapper struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RECEIVED_TIME_FIELD_DESC);
      oprot.writeI64(struct.receivedTime);
      oprot.writeFieldEnd();
      if (struct.body != null) {
        oprot.writeFieldBegin(BODY_FIELD_DESC);
        oprot.writeString(struct.body);
        oprot.writeFieldEnd();
      }
      if (struct.topicId != null) {
        oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
        oprot.writeString(struct.topicId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NotificationWrapperTupleSchemeFactory implements SchemeFactory {
    public NotificationWrapperTupleScheme getScheme() {
      return new NotificationWrapperTupleScheme();
    }
  }

  private static class NotificationWrapperTupleScheme extends TupleScheme<NotificationWrapper> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NotificationWrapper struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReceivedTime()) {
        optionals.set(0);
      }
      if (struct.isSetBody()) {
        optionals.set(1);
      }
      if (struct.isSetTopicId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetReceivedTime()) {
        oprot.writeI64(struct.receivedTime);
      }
      if (struct.isSetBody()) {
        oprot.writeString(struct.body);
      }
      if (struct.isSetTopicId()) {
        oprot.writeString(struct.topicId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NotificationWrapper struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.receivedTime = iprot.readI64();
        struct.setReceivedTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.body = iprot.readString();
        struct.setBodyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.topicId = iprot.readString();
        struct.setTopicIdIsSet(true);
      }
    }
  }

}

