/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.kaaproject.kaa.server.common.thrift.gen.bootstrap;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftOperationsServer implements org.apache.thrift.TBase<ThriftOperationsServer, ThriftOperationsServer._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftOperationsServer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftOperationsServer");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PUBLIC_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("publicKey", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SUPPORTED_CHANNELS_FIELD_DESC = new org.apache.thrift.protocol.TField("supportedChannels", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftOperationsServerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftOperationsServerTupleSchemeFactory());
  }

  public String Name; // required
  public int priority; // required
  public ByteBuffer publicKey; // required
  public List<ThriftSupportedChannel> supportedChannels; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "Name"),
    PRIORITY((short)2, "priority"),
    PUBLIC_KEY((short)3, "publicKey"),
    SUPPORTED_CHANNELS((short)4, "supportedChannels");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // PRIORITY
          return PRIORITY;
        case 3: // PUBLIC_KEY
          return PUBLIC_KEY;
        case 4: // SUPPORTED_CHANNELS
          return SUPPORTED_CHANNELS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRIORITY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "Integer")));
    tmpMap.put(_Fields.PUBLIC_KEY, new org.apache.thrift.meta_data.FieldMetaData("publicKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SUPPORTED_CHANNELS, new org.apache.thrift.meta_data.FieldMetaData("supportedChannels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "ThriftSupportedChannels")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftOperationsServer.class, metaDataMap);
  }

  public ThriftOperationsServer() {
  }

  public ThriftOperationsServer(
    String Name,
    int priority,
    ByteBuffer publicKey,
    List<ThriftSupportedChannel> supportedChannels)
  {
    this();
    this.Name = Name;
    this.priority = priority;
    setPriorityIsSet(true);
    this.publicKey = publicKey;
    this.supportedChannels = supportedChannels;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftOperationsServer(ThriftOperationsServer other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    this.priority = other.priority;
    if (other.isSetPublicKey()) {
      this.publicKey = org.apache.thrift.TBaseHelper.copyBinary(other.publicKey);
;
    }
    if (other.isSetSupportedChannels()) {
      this.supportedChannels = other.supportedChannels;
    }
  }

  public ThriftOperationsServer deepCopy() {
    return new ThriftOperationsServer(this);
  }

  @Override
  public void clear() {
    this.Name = null;
    setPriorityIsSet(false);
    this.priority = 0;
    this.publicKey = null;
    this.supportedChannels = null;
  }

  public String getName() {
    return this.Name;
  }

  public ThriftOperationsServer setName(String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public int getPriority() {
    return this.priority;
  }

  public ThriftOperationsServer setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public byte[] getPublicKey() {
    setPublicKey(org.apache.thrift.TBaseHelper.rightSize(publicKey));
    return publicKey == null ? null : publicKey.array();
  }

  public ByteBuffer bufferForPublicKey() {
    return publicKey;
  }

  public ThriftOperationsServer setPublicKey(byte[] publicKey) {
    setPublicKey(publicKey == null ? (ByteBuffer)null : ByteBuffer.wrap(publicKey));
    return this;
  }

  public ThriftOperationsServer setPublicKey(ByteBuffer publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  public void unsetPublicKey() {
    this.publicKey = null;
  }

  /** Returns true if field publicKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicKey() {
    return this.publicKey != null;
  }

  public void setPublicKeyIsSet(boolean value) {
    if (!value) {
      this.publicKey = null;
    }
  }

  public int getSupportedChannelsSize() {
    return (this.supportedChannels == null) ? 0 : this.supportedChannels.size();
  }

  public java.util.Iterator<ThriftSupportedChannel> getSupportedChannelsIterator() {
    return (this.supportedChannels == null) ? null : this.supportedChannels.iterator();
  }

  public void addToSupportedChannels(ThriftSupportedChannel elem) {
    if (this.supportedChannels == null) {
      this.supportedChannels = new ArrayList<ThriftSupportedChannel>();
    }
    this.supportedChannels.add(elem);
  }

  public List<ThriftSupportedChannel> getSupportedChannels() {
    return this.supportedChannels;
  }

  public ThriftOperationsServer setSupportedChannels(List<ThriftSupportedChannel> supportedChannels) {
    this.supportedChannels = supportedChannels;
    return this;
  }

  public void unsetSupportedChannels() {
    this.supportedChannels = null;
  }

  /** Returns true if field supportedChannels is set (has been assigned a value) and false otherwise */
  public boolean isSetSupportedChannels() {
    return this.supportedChannels != null;
  }

  public void setSupportedChannelsIsSet(boolean value) {
    if (!value) {
      this.supportedChannels = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Integer)value);
      }
      break;

    case PUBLIC_KEY:
      if (value == null) {
        unsetPublicKey();
      } else {
        setPublicKey((ByteBuffer)value);
      }
      break;

    case SUPPORTED_CHANNELS:
      if (value == null) {
        unsetSupportedChannels();
      } else {
        setSupportedChannels((List<ThriftSupportedChannel>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case PRIORITY:
      return Integer.valueOf(getPriority());

    case PUBLIC_KEY:
      return getPublicKey();

    case SUPPORTED_CHANNELS:
      return getSupportedChannels();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case PRIORITY:
      return isSetPriority();
    case PUBLIC_KEY:
      return isSetPublicKey();
    case SUPPORTED_CHANNELS:
      return isSetSupportedChannels();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftOperationsServer)
      return this.equals((ThriftOperationsServer)that);
    return false;
  }

  public boolean equals(ThriftOperationsServer that) {
    if (that == null)
      return false;

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_priority = true;
    boolean that_present_priority = true;
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_publicKey = true && this.isSetPublicKey();
    boolean that_present_publicKey = true && that.isSetPublicKey();
    if (this_present_publicKey || that_present_publicKey) {
      if (!(this_present_publicKey && that_present_publicKey))
        return false;
      if (!this.publicKey.equals(that.publicKey))
        return false;
    }

    boolean this_present_supportedChannels = true && this.isSetSupportedChannels();
    boolean that_present_supportedChannels = true && that.isSetSupportedChannels();
    if (this_present_supportedChannels || that_present_supportedChannels) {
      if (!(this_present_supportedChannels && that_present_supportedChannels))
        return false;
      if (!this.supportedChannels.equals(that.supportedChannels))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_Name = true && (isSetName());
    builder.append(present_Name);
    if (present_Name)
      builder.append(Name);

    boolean present_priority = true;
    builder.append(present_priority);
    if (present_priority)
      builder.append(priority);

    boolean present_publicKey = true && (isSetPublicKey());
    builder.append(present_publicKey);
    if (present_publicKey)
      builder.append(publicKey);

    boolean present_supportedChannels = true && (isSetSupportedChannels());
    builder.append(present_supportedChannels);
    if (present_supportedChannels)
      builder.append(supportedChannels);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(ThriftOperationsServer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicKey()).compareTo(other.isSetPublicKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicKey, other.publicKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupportedChannels()).compareTo(other.isSetSupportedChannels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupportedChannels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supportedChannels, other.supportedChannels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftOperationsServer(");
    boolean first = true;

    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("priority:");
    sb.append(this.priority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicKey:");
    if (this.publicKey == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.publicKey, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("supportedChannels:");
    if (this.supportedChannels == null) {
      sb.append("null");
    } else {
      sb.append(this.supportedChannels);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftOperationsServerStandardSchemeFactory implements SchemeFactory {
    public ThriftOperationsServerStandardScheme getScheme() {
      return new ThriftOperationsServerStandardScheme();
    }
  }

  private static class ThriftOperationsServerStandardScheme extends StandardScheme<ThriftOperationsServer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftOperationsServer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PUBLIC_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publicKey = iprot.readBinary();
              struct.setPublicKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUPPORTED_CHANNELS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.supportedChannels = new ArrayList<ThriftSupportedChannel>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  ThriftSupportedChannel _elem2;
                  _elem2 = new ThriftSupportedChannel();
                  _elem2.read(iprot);
                  struct.supportedChannels.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setSupportedChannelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftOperationsServer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
      oprot.writeI32(struct.priority);
      oprot.writeFieldEnd();
      if (struct.publicKey != null) {
        oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
        oprot.writeBinary(struct.publicKey);
        oprot.writeFieldEnd();
      }
      if (struct.supportedChannels != null) {
        oprot.writeFieldBegin(SUPPORTED_CHANNELS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.supportedChannels.size()));
          for (ThriftSupportedChannel _iter3 : struct.supportedChannels)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftOperationsServerTupleSchemeFactory implements SchemeFactory {
    public ThriftOperationsServerTupleScheme getScheme() {
      return new ThriftOperationsServerTupleScheme();
    }
  }

  private static class ThriftOperationsServerTupleScheme extends TupleScheme<ThriftOperationsServer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftOperationsServer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetPriority()) {
        optionals.set(1);
      }
      if (struct.isSetPublicKey()) {
        optionals.set(2);
      }
      if (struct.isSetSupportedChannels()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetName()) {
        oprot.writeString(struct.Name);
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority);
      }
      if (struct.isSetPublicKey()) {
        oprot.writeBinary(struct.publicKey);
      }
      if (struct.isSetSupportedChannels()) {
        {
          oprot.writeI32(struct.supportedChannels.size());
          for (ThriftSupportedChannel _iter4 : struct.supportedChannels)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftOperationsServer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.Name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.priority = iprot.readI32();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.publicKey = iprot.readBinary();
        struct.setPublicKeyIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.supportedChannels = new ArrayList<ThriftSupportedChannel>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            ThriftSupportedChannel _elem7;
            _elem7 = new ThriftSupportedChannel();
            _elem7.read(iprot);
            struct.supportedChannels.add(_elem7);
          }
        }
        struct.setSupportedChannelsIsSet(true);
      }
    }
  }

}

