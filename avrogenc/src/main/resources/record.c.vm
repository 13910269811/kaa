##
## Copyright 2014 CyberVision, Inc.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

#set ($PREFIX = $StyleUtils.toUpperUnderScore($namespacePrefix))
#set ($prefix = $StyleUtils.toLowerUnderScore($namespacePrefix))

#set ($recordName = $StyleUtils.toLowerUnderScore($schema.getName()))
#set ($isRecordNeedDeallocator = $TypeConverter.isRecordNeedDeallocator($schema))
#if ($isRecordNeedDeallocator)
static void ${prefix}_destroy_${recordName}(void* data)
{
    ${prefix}_${recordName}_t* record = (${prefix}_${recordName}_t*)data;

#foreach ($field in $schema.getFields())
#set ($fieldName = $StyleUtils.toLowerUnderScore($field.name()))
#if ($TypeConverter.isBytesOrString($field.schema()))
#if ($TypeConverter.isBytes($field.schema()))
    kaa_destroy_bytes(record->$fieldName);
#end
    KAA_FREE(record->$fieldName);
#elseif ($TypeConverter.isRecordOrUnion($field.schema()))
#if ($TypeConverter.isUnionType($field.schema()) || $TypeConverter.isRecordNeedDeallocator($field.schema()))
    record->${fieldName}->destroy(record->$fieldName);
#end
    KAA_FREE(record->$fieldName);
#elseif ($TypeConverter.isArrayType($field.schema()))
#set ($arrayElementSchema = $field.schema().getElementType())
    #if ($TypeConverter.isPrimitiveType($arrayElementSchema))
        kaa_list_destroy(record->${fieldName}, NULL);
    #elseif ($TypeConverter.isBytes($arrayElementSchema))
        kaa_list_destroy(record->${fieldName}, kaa_destroy_bytes);
    #elseif ($TypeConverter.isUnionType($arrayElementSchema))
    #set ($unionElementName = $TypeConverter.generateUnionName($arrayElementSchema).toLowerCase())
        kaa_list_destroy(record->${fieldName}, ${prefix}_destroy_${unionElementName});
    #elseif (!$TypeConverter.isRecordNeedDeallocator($arrayElementSchema))
        kaa_list_destroy(record->${fieldName}, NULL);
    #else
        #set ($elementName = $StyleUtils.toLowerUnderScore($arrayElementSchema.getName()))
        kaa_list_destroy(record->${fieldName}, ${prefix}_destroy_${elementName});
    #end
#end
#end
}
#end
#if ($TypeConverter.isTypeOut($schema))
static size_t ${prefix}_get_size_${recordName}(void* data)
{
    size_t record_size = 0;
    ${prefix}_${recordName}_t* record = (${prefix}_${recordName}_t*)data;

#foreach ($field in $schema.getFields())
#set ($fieldName = $StyleUtils.toLowerUnderScore($field.name()))
#if ($TypeConverter.isRecordOrUnion($field.schema()))
    record_size += record->${fieldName}->get_size(record->${fieldName});
#elseif ($TypeConverter.isStringType($field.schema()))
    record_size += kaa_get_size_string(record->${fieldName});
#elseif ($TypeConverter.isBytes($field.schema()))
    record_size += kaa_get_size_bytes(record->${fieldName});
#elseif ($TypeConverter.isPrimitiveType($field.schema()))
    record_size += size_long((int64_t)record->${fieldName});
#elseif ($TypeConverter.isArrayType($field.schema()))
#set ($arrayElementSchema = $field.schema().getElementType())
    #if ($TypeConverter.isStringType($arrayElementSchema))
        record_size += kaa_array_size(record->${fieldName}, kaa_get_size_string);
    #elseif ($TypeConverter.isBytes($arrayElementSchema))
        record_size += kaa_array_size(record->${fieldName}, kaa_get_size_bytes);
    #elseif ($TypeConverter.isPrimitiveType($field.schema()))
        //TODO: implement calculating size for array of primitives (bool, int, long, enum)
    #elseif ($TypeConverter.isUnionType($arrayElementSchema))
    #set ($unionElementName = $TypeConverter.generateUnionName($arrayElementSchema).toLowerCase())
        record_size += kaa_array_size(record->${fieldName}, ${prefix}_get_size_${unionElementName});
    #else
    #set ($elementName = $StyleUtils.toLowerUnderScore($arrayElementSchema.getName()))
        record_size += kaa_array_size(record->${fieldName}, ${prefix}_get_size_${elementName});
    #end
#end
#end

    return record_size;
}

static void ${prefix}_serialize_${recordName}(avro_writer_t writer, void* data)
{
    ${prefix}_${recordName}_t* record = (${prefix}_${recordName}_t*)data;

#foreach ($field in $schema.getFields())
#set ($fieldName = $StyleUtils.toLowerUnderScore($field.name()))
#if ($TypeConverter.isRecordOrUnion($field.schema()))
    record->${fieldName}->serialize(writer, record->${fieldName});
#elseif ($TypeConverter.isBytesOrString($field.schema()))
#if ($TypeConverter.isBytes($field.schema()))
    kaa_serialize_bytes(writer, record->${fieldName});
#else
    avro_binary_encoding.write_string(writer, record->${fieldName});
#end
#elseif ($TypeConverter.isArrayType($field.schema()))
#set ($arrayElementSchema = $field.schema().getElementType())
    #if ($TypeConverter.isPrimitiveType($arrayElementSchema))
        #set ($type = $arrayElementSchema.getType().toString().toLowerCase())
        #if ($TypeConverter.isEnumType($arrayElementSchema))
        #set ($type = "long")
        #end
        kaa_serialize_array(writer, record->${fieldName}, kaa_serialize_${type});
    #elseif ($TypeConverter.isBytes($arrayElementSchema))
        kaa_serialize_array(writer, record->${fieldName}, kaa_serialize_bytes);
    #elseif ($TypeConverter.isRecordType($arrayElementSchema))
        #set ($recordElementName = $StyleUtils.toLowerUnderScore($arrayElementSchema.getName()))
        kaa_serialize_array(writer, record->${fieldName}, ${prefix}_serialize_${recordElementName});
    #elseif ($TypeConverter.isUnionType($arrayElementSchema))
        #set ($unionElementName = $TypeConverter.generateUnionName($arrayElementSchema).toLowerCase())
        kaa_serialize_array(writer, record->${fieldName}, ${prefix}_serialize_${unionElementName});
    #end
#else
#set ($type = $field.schema().getType().toString().toLowerCase())
#if ($TypeConverter.isEnumType($field.schema()))
    #set ($type = "long")
#end
    avro_binary_encoding.write_${type}(writer, record->${fieldName});
#end
#end
}

${prefix}_${recordName}_t* ${prefix}_create_${recordName}()
{
    ${prefix}_${recordName}_t* record = (${prefix}_${recordName}_t *) KAA_MALLOC(sizeof(${prefix}_${recordName}_t));
    record->serialize = ${prefix}_serialize_${recordName};
    record->get_size = ${prefix}_get_size_${recordName};
#if ($isRecordNeedDeallocator)
    record->destroy = ${prefix}_destroy_${recordName};
#else
    record->destroy = kaa_destroy_null;
#end
    return record;
}
#end
#if ($TypeConverter.isTypeIn($schema))

${prefix}_${recordName}_t* ${prefix}_deserialize_${recordName}(avro_reader_t reader)
{
    ${prefix}_${recordName}_t* record = (${prefix}_${recordName}_t *) KAA_MALLOC(sizeof(${prefix}_${recordName}_t));
#if ($TypeConverter.isTypeOut($schema))
    record->serialize = ${prefix}_serialize_${recordName};
    record->get_size = ${prefix}_get_size_${recordName};
#end
#if ($isRecordNeedDeallocator)
    record->destroy = ${prefix}_destroy_${recordName};
#else
    record->destroy = kaa_destroy_null;
#end
    
#foreach ($field in $schema.getFields())
#set ($fieldName = $StyleUtils.toLowerUnderScore($field.name()))
#if ($TypeConverter.isRecordType($field.schema()))
    #set ($recordFieldName = $StyleUtils.toLowerUnderScore($field.schema().getName()))
    record->$fieldName = ${prefix}_deserialize_${recordFieldName}(reader);
#elseif ($TypeConverter.isUnionType($field.schema()))
#set ($unionFieldName = $TypeConverter.generateUnionName($field.schema()).toLowerCase())
    record->$fieldName = ${prefix}_deserialize_${unionFieldName}(reader);
#elseif ($TypeConverter.isBytesOrString($field.schema()))
    #if ($TypeConverter.isBytes($field.schema()))
        record->${fieldName} = kaa_deserialize_bytes(reader); 
    #else
    int64_t ${fieldName}_size;
    avro_binary_encoding.read_string(reader, &record->${fieldName}, &${fieldName}_size);
    #end
#elseif ($TypeConverter.isArrayType($field.schema()))
#set ($elementSchema = $field.schema().getElementType())
    #if ($TypeConverter.isPrimitiveType($elementSchema))
        #set ($type = $elementSchema.getType().toString().toLowerCase())
        #if ($TypeConverter.isEnumType($elementSchema))
            #set ($type = "long")
        #end
        record->${fieldName} = kaa_deserialize_array(reader, (deserialize_fn)kaa_deserialize_${type});
    #elseif ($TypeConverter.isBytes($elementSchema))
        record->${fieldName} = kaa_deserialize_array(reader, (deserialize_fn)kaa_deserialize_bytes);
    #elseif ($TypeConverter.isRecordType($elementSchema))
        #set ($recordElementName = $StyleUtils.toLowerUnderScore($elementSchema.getName()))
        record->${fieldName} = kaa_deserialize_array(reader, (deserialize_fn)${prefix}_deserialize_${recordElementName});
    #elseif ($TypeConverter.isUnionType($elementSchema))
        #set ($unionElementName = $TypeConverter.generateUnionName($elementSchema).toLowerCase())
        record->${fieldName} = kaa_deserialize_array(reader, (deserialize_fn)${prefix}_deserialize_${unionElementName});
    #end
#elseif ($TypeConverter.isEnumType($field.schema()))
    int64_t ${fieldName}_value;
    avro_binary_encoding.read_long(reader, &${fieldName}_value);
    record->$fieldName = ${fieldName}_value;
#else
    #set ($type = $field.schema().getType().toString().toLowerCase())
    avro_binary_encoding.read_${type}(reader, &record->$fieldName);
#end
#end
    
    return record;
}
#end

