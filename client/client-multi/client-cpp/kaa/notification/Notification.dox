/*
 * Copyright 2014 CyberVision, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
    \page notification_management_page Notification management

    \section brief Brief description

    The Kaa Notifications subsystem enables messages delivery from the 
    Kaa cluster to endpoints (EP). It is based on auto-generated classes
    according to the topic's notification schema used during SDK generation.

    Notification topics can be mandatory or voluntary. Mandatory topic
    notifications are delivered in an enforced manner. Voluntary topics require
    subscription. It is the responsibility of the client code to register
    the topic update listener and subscribe to voluntary topics.

    \section topics Topics - usage examples

    \subsection available_topics Access to available topics
    @code
        using namespace kaa;

        /*
         * Kaa initialization
         */

        IKaaClient& kaaClient = Kaa::getKaaClient();
        INotificationManager& notificationManager = kaaClient.getNotificationManager();
        const auto& topics = notificationManager.getTopics();

        for (const auto it : topics) {
            std::cout << "Id: " << it.first << ", name: " << it.second.name
                      << ", type: " << LoggingUtils::TopicSubscriptionTypeToString(
                              it.second.subscriptionType) << std::endl;
        }
    @endcode

    \subsection updates_of_available_topics Updates of available topics
    If there is need to receive updates of available topic, do following:
    @code
        #include "kaa/notification/INotificationTopicListListener.hpp"

        class BasicTopicUpdateListener : public INotificationTopicListListener {
        public:
            // Will be called on each update of the topic list 
            virtual void onListUpdated(const Topics& newList) {
                for (const auto topic : newList) {
                    std::cout << "Id: " << topic.id << ", name: " << topic.name
                              << ", type: " << LoggingUtils::TopicSubscriptionTypeToString(
                                      topic.subscriptionType) << std::endl;
                }
            }
        };
        ...
        // Create and subscribe listener to receive topic list updates
        INotificationTopicListListenerPtr topicUpdateListener(new BasicTopicUpdateListener);
        notificationManager.addTopicListListener(topicUpdateListener);
        ...
        // Remove topic update listener
        notificationManager.removeTopicListListener(topicUpdateListener);
    @endcode

    \section notifications Notifications - usage examples 

    In order to receive notifications, both mandatory or voluntary, at least one
    listener should be added. A particular listener may be added for a specified
    topic as well.

    Assume, notification schema has the following form:
    @code{.json}
        {
            "type": "record",
            "name": "BasicNotification",
            "namespace": "org.kaaproject.kaa.client.example",
            "fields": [
                {
                    "name": "body",
                    "type": "string"
                }
            ]
        }
    @endcode

    After calling avrogen.sh script Avro C++ compiler will be generated
    appropriate code and put it into NotificationGen.hpp header.
    So auto-generated notification class will be like:
    @code
        struct BasicNotification {
            std::string body;
        };
    @endcode

    As mentioned earlier, there is two kind of topics - mandatory and voluntary.
    Further it will be discussed dealing with both of them.

    \subsection global_listeners Topic notification listener(s)

    In order to receive notifications from all available topics (both mandatory 
    and subscribed voluntary), do following:
    @code
        #include "kaa/gen/NotificationGen.hpp" // auto-generated header
        #include "kaa/notification/AbstractNotificationListener.hpp"

        class BasicNotificationListener : public AbstractNotificationListener<BasicNotification> {
            virtual void onNotification(const std::string& id, const BasicNotification& notification) {
                std::cout << "Received notification with body: " << notification.body << std::endl;
            }
        };
        ...
        INotificationListenerPtr globalNotificationListener(new BasicNotificationListener);
        
        // Add listener
        notificationManager.addNotificationListener(globalNotificationListener);
        
        ...
        
        // Remove listener
        notificationManager.removeNotificationListener(globalNotificationListener);
    @endcode

    \subsection specific_listener Topic specific listener(s)

    To add listener(s) for a specified topic, do following:
    @code
        #include "kaa/gen/NotificationGen.hpp" // auto-generated header
        #include "kaa/notification/AbstractNotificationListener.hpp"

        class WheatherNotificationListener : public AbstractNotificationListener<BasicNotification> {
            virtual void onNotification(const std::string& id, const BasicNotification& notification) {
                std::cout << "What's weather: " << notification.body << std::endl;
            }
        };

        class NewsNotificationListener : public AbstractNotificationListener<BasicNotification> {
            virtual void onNotification(const std::string& id, const BasicNotification& notification) {
                std::cout << "What's news: " << notification.body << std::endl;
            }
        };

        // Add specific listeners both for news and weather topics
        INotificationListenerPtr weatherTopicListener(new WheatherNotificationListener);
        INotificationListenerPtr newsTopicListener(new NewsNotificationListener);

        // Add listener
        notificationManager.addNotificationListener("wheather_topic_id", weatherTopicListener);
        notificationManager.addNotificationListener("news_topic_id", newsTopicListener);

        ...

        // Remove listener
        notificationManager.removeNotificationListener("wheather_topic_id", weatherTopicListener);
        notificationManager.removeNotificationListener("news_topic_id", newsTopicListener);
    @endcode

    \subsection voluntary_topics Voluntary topic (un)subscription

    To receive notifications relating to some voluntary topic, firstly you
    should to subscribe on this topic:
    @code
        notificationManager.subscribeOnTopic("voluntary_topic_id", true);
    @endcode
    
    Unsubscription:
    @code
        notificationManager.unsubscribeFromTopic("voluntary_topic_id", true);
    @endcode

    There is a similar stuff to deal with a group of voluntary topics -
    @link kaa::INotificationManager::subscribeOnTopics() @endlink and
    @link kaa::INotificationManager#unsubscribeFromTopics() @endlink .
    
    \subsection subscription_performance Performance
    
    To increase Kaa performance in case of several subsequent subscription
    changes and avoid possible race conditions, we recommend to use following
    approach:
    @code
    // Make subscription changes with parameter forceSync set to false
    notificationManager.subscribeOnTopics({"voluntary_topic1", "voluntary_topic2", "voluntary_topic3"}, false);
    notificationManager.unsubscribeFromTopic("voluntary_topic4", false);

    // Add listener(s) (optional)

    // Commit changes
    notificationManager.sync();
  @endcode
*/