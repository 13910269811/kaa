/*
 * Copyright 2014 CyberVision, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.kaaproject.kaa.server.common.core.algorithms;

import static org.kaaproject.kaa.server.common.core.algorithms.CommonConstants.KAA_NAMESPACE;
import static org.kaaproject.kaa.server.common.core.algorithms.CommonConstants.UUID_SIZE;
import static org.kaaproject.kaa.server.common.core.algorithms.CommonConstants.UUID_TYPE;

import java.nio.ByteBuffer;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.avro.Schema;
import org.apache.avro.generic.GenericData;

public class CommonUtils {

    /**
     * Find raw schema by name.
     *
     * @param root the root record
     * @param schemaName the schema name
     * @param schemaNamespace the schema namespace
     * @return the map
     */
    @SuppressWarnings({"unchecked", "rawtypes"})
    public static Map<String, Object> findRawSchemaByName(Map<String, Object> root, String schemaName, String schemaNamespace) {
        String name = (String) root.get(CommonConstants.NAME_FIELD);
        String namespace = (String) root.get(CommonConstants.NAMESPACE_FIELD);
        // looking for node that has child nodes 'name' and 'namespace' with corresponding values
        if (schemaName.equals(name) && schemaNamespace.equals(namespace)) {
            return root;
        } else {
            for (Map.Entry<String, Object> entry : root.entrySet()) {
                if (entry.getValue() instanceof List) {
                    List items = (List) entry.getValue();
                    for (Object item : items) {
                        if (item instanceof Map) {
                            Map<String, Object> foundSchema = findRawSchemaByName((Map<String, Object>) item, schemaName, schemaNamespace);
                            if (foundSchema != null) {
                                return foundSchema;
                            }
                        }
                    }
                } else if (entry.getValue() instanceof Map) {
                    Map<String, Object> foundSchema = findRawSchemaByName((Map<String, Object>) entry.getValue(), schemaName, schemaNamespace);
                    if (foundSchema != null) {
                        return foundSchema;
                    }
                }
            }
        }
        return null;
    }

    /**
     * Generates UUID bytes.
     *
     * @return list of generated bytes.
     */
    public static byte [] generateUUIDBytes() {
        UUID uuid = UUID.randomUUID();

        ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[UUID_SIZE]);
        byteBuffer.putLong(uuid.getMostSignificantBits());
        byteBuffer.putLong(uuid.getLeastSignificantBits());

        return byteBuffer.array();
    }

    public static GenericData.Fixed generateUuidObject() {
        Schema avroSchema = Schema.createFixed(UUID_TYPE, null, KAA_NAMESPACE, UUID_SIZE);
        return new GenericData.Fixed(avroSchema, generateUUIDBytes());
    }

}
