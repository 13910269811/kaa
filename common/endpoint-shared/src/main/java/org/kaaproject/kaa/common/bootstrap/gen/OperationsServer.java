/*
 * Copyright 2014 CyberVision, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.kaaproject.kaa.common.bootstrap.gen;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class OperationsServer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OperationsServer\",\"namespace\":\"org.kaaproject.kaa.common.bootstrap.gen\",\"fields\":[{\"name\":\"DNSName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Priority\",\"type\":\"int\"},{\"name\":\"PublicKey\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String DNSName;
   private int Priority;
   private java.nio.ByteBuffer PublicKey;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public OperationsServer() {}

  /**
   * All-args constructor.
   */
  public OperationsServer(java.lang.String DNSName, java.lang.Integer Priority, java.nio.ByteBuffer PublicKey) {
    this.DNSName = DNSName;
    this.Priority = Priority;
    this.PublicKey = PublicKey;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return DNSName;
    case 1: return Priority;
    case 2: return PublicKey;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: DNSName = (java.lang.String)value$; break;
    case 1: Priority = (java.lang.Integer)value$; break;
    case 2: PublicKey = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'DNSName' field.
   */
  public java.lang.String getDNSName() {
    return DNSName;
  }

  /**
   * Sets the value of the 'DNSName' field.
   * @param value the value to set.
   */
  public void setDNSName(java.lang.String value) {
    this.DNSName = value;
  }

  /**
   * Gets the value of the 'Priority' field.
   */
  public java.lang.Integer getPriority() {
    return Priority;
  }

  /**
   * Sets the value of the 'Priority' field.
   * @param value the value to set.
   */
  public void setPriority(java.lang.Integer value) {
    this.Priority = value;
  }

  /**
   * Gets the value of the 'PublicKey' field.
   */
  public java.nio.ByteBuffer getPublicKey() {
    return PublicKey;
  }

  /**
   * Sets the value of the 'PublicKey' field.
   * @param value the value to set.
   */
  public void setPublicKey(java.nio.ByteBuffer value) {
    this.PublicKey = value;
  }

  /** Creates a new OperationsServer RecordBuilder */
  public static org.kaaproject.kaa.common.bootstrap.gen.OperationsServer.Builder newBuilder() {
    return new org.kaaproject.kaa.common.bootstrap.gen.OperationsServer.Builder();
  }
  
  /** Creates a new OperationsServer RecordBuilder by copying an existing Builder */
  public static org.kaaproject.kaa.common.bootstrap.gen.OperationsServer.Builder newBuilder(org.kaaproject.kaa.common.bootstrap.gen.OperationsServer.Builder other) {
    return new org.kaaproject.kaa.common.bootstrap.gen.OperationsServer.Builder(other);
  }
  
  /** Creates a new OperationsServer RecordBuilder by copying an existing OperationsServer instance */
  public static org.kaaproject.kaa.common.bootstrap.gen.OperationsServer.Builder newBuilder(org.kaaproject.kaa.common.bootstrap.gen.OperationsServer other) {
    return new org.kaaproject.kaa.common.bootstrap.gen.OperationsServer.Builder(other);
  }
  
  /**
   * RecordBuilder for OperationsServer instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OperationsServer>
    implements org.apache.avro.data.RecordBuilder<OperationsServer> {

    private java.lang.String DNSName;
    private int Priority;
    private java.nio.ByteBuffer PublicKey;

    /** Creates a new Builder */
    private Builder() {
      super(org.kaaproject.kaa.common.bootstrap.gen.OperationsServer.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.kaaproject.kaa.common.bootstrap.gen.OperationsServer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.DNSName)) {
        this.DNSName = data().deepCopy(fields()[0].schema(), other.DNSName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Priority)) {
        this.Priority = data().deepCopy(fields()[1].schema(), other.Priority);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.PublicKey)) {
        this.PublicKey = data().deepCopy(fields()[2].schema(), other.PublicKey);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing OperationsServer instance */
    private Builder(org.kaaproject.kaa.common.bootstrap.gen.OperationsServer other) {
            super(org.kaaproject.kaa.common.bootstrap.gen.OperationsServer.SCHEMA$);
      if (isValidValue(fields()[0], other.DNSName)) {
        this.DNSName = data().deepCopy(fields()[0].schema(), other.DNSName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Priority)) {
        this.Priority = data().deepCopy(fields()[1].schema(), other.Priority);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.PublicKey)) {
        this.PublicKey = data().deepCopy(fields()[2].schema(), other.PublicKey);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'DNSName' field */
    public java.lang.String getDNSName() {
      return DNSName;
    }
    
    /** Sets the value of the 'DNSName' field */
    public org.kaaproject.kaa.common.bootstrap.gen.OperationsServer.Builder setDNSName(java.lang.String value) {
      validate(fields()[0], value);
      this.DNSName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'DNSName' field has been set */
    public boolean hasDNSName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'DNSName' field */
    public org.kaaproject.kaa.common.bootstrap.gen.OperationsServer.Builder clearDNSName() {
      DNSName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'Priority' field */
    public java.lang.Integer getPriority() {
      return Priority;
    }
    
    /** Sets the value of the 'Priority' field */
    public org.kaaproject.kaa.common.bootstrap.gen.OperationsServer.Builder setPriority(int value) {
      validate(fields()[1], value);
      this.Priority = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'Priority' field has been set */
    public boolean hasPriority() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'Priority' field */
    public org.kaaproject.kaa.common.bootstrap.gen.OperationsServer.Builder clearPriority() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'PublicKey' field */
    public java.nio.ByteBuffer getPublicKey() {
      return PublicKey;
    }
    
    /** Sets the value of the 'PublicKey' field */
    public org.kaaproject.kaa.common.bootstrap.gen.OperationsServer.Builder setPublicKey(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.PublicKey = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'PublicKey' field has been set */
    public boolean hasPublicKey() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'PublicKey' field */
    public org.kaaproject.kaa.common.bootstrap.gen.OperationsServer.Builder clearPublicKey() {
      PublicKey = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public OperationsServer build() {
      try {
        OperationsServer record = new OperationsServer();
        record.DNSName = fieldSetFlags()[0] ? this.DNSName : (java.lang.String) defaultValue(fields()[0]);
        record.Priority = fieldSetFlags()[1] ? this.Priority : (java.lang.Integer) defaultValue(fields()[1]);
        record.PublicKey = fieldSetFlags()[2] ? this.PublicKey : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
